import gevent
from gevent import monkey
from gevent.pool import Pool

monkey.patch_all()  # 给项目所有延迟打补丁，否则会变成单进程串行执行
# 有关 gevent 的包必须放在开头，否则会出现 MonkeyPatchWarning 错误

import time
import random
import requests
from tqdm import tqdm
from lxml import etree
from fake_useragent import UserAgent

headers = {
    "Referer": "http://www.mgsdaigou4.net/",
    "User-Agent": UserAgent().random
}

# -> tuple 为注解，无代码不执行，仅做函数返回值类型提示
def parse_html(response) -> tuple: 
    html = etree.HTML(response.text)
    titles = html.xpath('//ul[@class="masonry clearfix"]/li//div/a/@title')
    img_srcs = html.xpath('//ul[@class="masonry clearfix"]/li//img/@src')
    return tuple(zip(titles, img_srcs))


def get_response(page):
    try:
        url = f"http://www.mgsdaigou4.net/292my/page/{page}"
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            tits_img = parse_html(response)
            for title, img_url in tqdm(tits_img, total=len(tits_img), desc=f"第{page}页的图片正在爬取"):
                down_img(title, img_url)
            time.sleep(random.randint(1, 3))  # 随机延迟 1-3 秒
        else:
            print(f"requests fail {url}")
    except Exception as e:
        print("Exception occurred in get_response()", e.args)


def down_img(title, img_url):
    try:
        file_name = f"D:/资源代购/mywife/{title}.jpg"
        with requests.get(img_url, headers=headers) as resp:
            if resp.status_code == 200:
                with open(file_name, 'wb') as f: # 若使用urlretrieve(url,file_name),无法添加请求头
                    f.write(resp.content)
                time.sleep(1)
            else:
                print(f"down_img failed {title} {img_url}")
    except Exception as e:
        print("Exception occurred in down_img()", e.args)


def main():
    pool = Pool(5) # 此处类似进程池 pool.map() 用法
    thread = [pool.spawn(get_response, i) for i in range(1, 21)]
    gevent.joinall(thread)
    
    # 使用 gevent 库不用单进程爬取函数，只要在最后加上 gevent.spawn()即可
    # gevent.join() 开始执行，相比 async 库，不修改原有函数，会显得简单许多


if __name__ == '__main__':
    start = time.time()
    main()
    end = time.time()
    print(f"cost time {end-start:.2f}s")
